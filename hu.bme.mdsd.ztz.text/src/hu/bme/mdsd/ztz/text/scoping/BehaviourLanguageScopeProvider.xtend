/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.bme.mdsd.ztz.model.behaviour.DynamicRobot
import org.eclipse.xtext.scoping.IScope
import hu.bme.mdsd.ztz.text.manager.ResourceManager
import hu.bme.mdsd.ztz.model.drone.RobotMissionContainer
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import hu.bme.mdsd.ztz.model.drone.Robot
import hu.bme.mdsd.ztz.model.behaviour.TaskExecution
import hu.bme.mdsd.ztz.model.drone.Task

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BehaviourLanguageScopeProvider extends AbstractBehaviourLanguageScopeProvider {
 
	def IScope scopeForDynamicRobot(DynamicRobot dynamicRobot, EReference reference) {
		val manager = ResourceManager.instance
		
		if (manager.resource != null) {
			val container = manager.resource.contents.get(0) as RobotMissionContainer
			return Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(container, Robot))
		}
		
		super.getScope(dynamicRobot, reference)
	}
	
	
	def IScope scopeForTaskExecution(TaskExecution taskExecution, EReference reference) {
		val manager = ResourceManager.instance
		
		if (manager.resource != null) {
			val container = manager.resource.contents.get(0) as RobotMissionContainer
			return Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(container, Task))
		}
		
		super.getScope(taskExecution, reference)
	}

	override  getScope(EObject context, EReference reference) {
		if (context instanceof DynamicRobot) {
			return scopeForDynamicRobot(context, reference)	
		} else if (context instanceof TaskExecution) {
			return scopeForTaskExecution(context, reference)
		}
		
		super.getScope(context, reference)
	}

}
