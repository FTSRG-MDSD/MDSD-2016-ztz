grammar hu.bme.mdsd.ztz.text.BehaviourLanguage with org.eclipse.xtext.common.Terminals

generate behaviourLanguage "http://www.mdsd.hu/behaviour/language"
import "http://www.mdsd.hu/behaviour"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mdsd.hu/drone" as drone

BehaviourLanguage:
	importModel=Import
	container=BehaviourContainer
	(statements+=Statement)*
;


Import:
	'import' importURI=STRING;


BehaviourContainer returns BehaviourContainer:
	{BehaviourContainer}
	'Declaration'
	'{'
		('DynamicRobots' '{' dynamicRobots+=DynamicRobot ( "," dynamicRobots+=DynamicRobot)* '}' )?
		('TaskExecutions' '{' taskExecutions+=TaskExecution ( "," taskExecutions+=TaskExecution)* '}' )?
		('TaskRequirements' '{' taskRequirements+=TaskRequirement ( "," taskRequirements+=TaskRequirement)* '}' )?
		('Keys' behaviourKeysContainer=BehaviouralPropertyKeyContainer)?
	'}'
;


//Action returns Action:
//	Action_Impl | UnicastCommunication | MulticastCommunication | BroadcastCommunication;


PropertyValue returns drone::PropertyValue:
	StringValue | MeasureValue;


DynamicRobot returns DynamicRobot:
	name=EString ':' robot=[drone::Robot]
//	'{'
//		'status' status=RobotStatus
//		'robot' robot=[drone::Robot]
//		('executedTasks' '(' executedTasks+=[TaskExecution|EString] ( "," executedTasks+=[TaskExecution|EString])* ')' )?
//		('detectedObjects' '{' detectedObjects+=DetectedObject ( "," detectedObjects+=DetectedObject)* '}' )?
//		('collaborations' collaborations=RobotCollaboration)?
//		('messageRepository' messageRepository=MessageRepository)?
//		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
//	'}'
;


Statement:
	ActionStatement | MessageStatement | CollaborationStatement
;


ActionStatement:
	robot=[DynamicRobot] 'do' action=Action_Impl ('->' moreactions+=Action_Impl)*
;


MessageStatement:
	robot=[DynamicRobot] 'send' target=MessageTarget message=Message
;


CollaborationStatement:
	robot=[DynamicRobot] 'know' collaboration+=RobotCollaboration (',' collaboration+=RobotCollaboration )*
;


MessageTarget:
	UniTarget | MultiTarget | AllTarget
;

UniTarget:
	target = [DynamicRobot]
;


MultiTarget:
	'(' target+=[DynamicRobot] ')'
;

AllTarget:
	target='*'
;

TaskExecution returns TaskExecution:
	name=EString
	'{'
		'status' status=TaskExecutionStatus
		('executors' '(' executors+=[DynamicRobot|EString] ( "," executors+=[DynamicRobot|EString])* ')' )?
		'task' task=[drone::Task|EString]
		('requirement' requirement=[TaskRequirement|EString])?
		('executionTime' executionTime=MeasureValue)?
	'}';


TaskRequirement returns TaskRequirement:
	'TaskRequirement'
	name=EString
	'{'
		'participants' participants=EInt
		'taskExecution' taskExecution=[TaskExecution|EString]
		('prerequisite' prerequisite=[TaskExecution|EString])?
		('requiredCapabilities' '(' requiredCapabilities+=[drone::Capability|EString] ( "," requiredCapabilities+=[drone::Capability|EString])* ')' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('capabilityProperties' '{' capabilityProperties+=CapabilityProperties ( "," capabilityProperties+=CapabilityProperties)* '}' )?
	'}';

BehaviouralPropertyKeyContainer returns BehaviouralPropertyKeyContainer:
	{BehaviouralPropertyKeyContainer}
	'BehaviouralPropertyKeyContainer'
	name=EString
	'{'
		('keys' '{' keys+=PropertyKey ( "," keys+=PropertyKey)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

//Robot returns drone::Robot:
//	'Robot'
//	name=EString
//	'{'
//		('tasks' '(' tasks+=[drone::Task|EString] ( "," tasks+=[drone::Task|EString])* ')' )?
//		('capabilities' '(' capabilities+=[drone::Capability|EString] ( "," capabilities+=[drone::Capability|EString])* ')' )?
//		'position' position=Position
//		'size' size=Size
//		('batteries' '{' batteries+=Battery ( "," batteries+=Battery)* '}' )?
//		('equipments' '{' equipments+=Equipment ( "," equipments+=Equipment)* '}' )?
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//		('communicationRange' communicationRange=MeasureValue)?
//		('weight' weight=MeasureValue)?
//		('capabilityProperties' '{' capabilityProperties+=CapabilityProperties ( "," capabilityProperties+=CapabilityProperties)* '}' )?
//	'}';

DetectedObject returns DetectedObject:
	(obstacle?='obstacle')?
	'DetectedObject'
	'{'
		'object' object=[drone::AreaObject]
	'}';

RobotCollaboration returns RobotCollaboration:
		{RobotCollaboration}
		collaborator=[DynamicRobot]
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
;

MessageRepository returns MessageRepository:
	{MessageRepository}
	'MessageRepository'
	name=EString
	'{'
		('sendedMessages' '{' sendedMessages+=Message ( "," sendedMessages+=Message)* '}' )?
	'}';

enum RobotStatus returns RobotStatus:
				Ready = 'Ready' | TurnedOff = 'TurnedOff' | Waiting = 'Waiting' | Executing = 'Executing';

Action_Impl returns Action:
	{Action}
	name=EString ('(' currentTaskExecution=[TaskExecution] ')')?
//	'{'
//		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}'
;

//Position returns drone::Position:
//	{drone::Position}
//	'Position'
//	'{'
//		('coordinates' '{' coordinates+=Coordinate ( "," coordinates+=Coordinate)* '}' )?
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

//Size returns drone::Size:
//	'Size'
//	'{'
//		'width' width=MeasureValue
//		'height' height=MeasureValue
//		'length' length=MeasureValue
//	'}';

//Battery returns drone::Battery:
//	'Battery'
//	'{'
//		'capacity' capacity=MeasureValue
//		'voltage' voltage=MeasureValue
//		'rechargeTime' rechargeTime=MeasureValue
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

//Equipment returns drone::Equipment:
//	{drone::Equipment}
//	'Equipment'
//	name=EString
//	'{'
//		('facilitate' '(' facilitate+=[drone::Capability|EString] ( "," facilitate+=[drone::Capability|EString])* ')' )?
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

//Task returns drone::Task:
//	'Task'
//	name=EString
//	'{'
//		'descriptor' descriptor=TaskDescriptor
//	'}';

Property returns drone::Property:
	'Property'
	'{'
		'key' key=[drone::PropertyKey|EString]
		'value' value=PropertyValue
	'}';

MeasureValue returns drone::MeasureValue:
	'MeasureValue'
	'{'
		('value' value=EFloat)?
		'dimension' dimension=[drone::MeasureDimension|EString]
	'}';

//Capability returns drone::Capability:
//	{drone::Capability}
//	'Capability'
//	name=EString;

CapabilityProperties returns drone::CapabilityProperties:
	'CapabilityProperties'
	'{'
		'capability' capability=[drone::Capability|EString]
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

//Coordinate returns drone::Coordinate:
//	'Coordinate'
//	'{'
//		'latitude' latitude=EFloat
//		'longitude' longitude=EFloat
//		'altitude' altitude=EFloat
//	'}';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

//TaskDescriptor returns drone::TaskDescriptor:
//	{drone::TaskDescriptor}
//	'TaskDescriptor'
//	'{'
//		('targets' '(' targets+=[drone::AreaObject|EString] ( "," targets+=[drone::AreaObject|EString])* ')' )?
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

//AreaObject returns drone::AreaObject:
//	{drone::AreaObject}
//	'AreaObject'
//	name=EString
//	'{'
//		('positions' '{' positions+=Position ( "," positions+=Position)* '}' )?
//		('size' size=Size)?
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

PropertyKey returns drone::PropertyKey:
	{drone::PropertyKey}
	'PropertyKey'
	name=EString;

StringValue returns drone::StringValue:
	'StringValue'
	'{'
		'value' value=EString
	'}';

//MeasureDimension returns drone::MeasureDimension:
//	{drone::MeasureDimension}
//	'MeasureDimension'
//	name=EString
//	'{'
//		('conversions' '{' conversions+=MeasureConversion ( "," conversions+=MeasureConversion)* '}' )?
//	'}';
//
//MeasureConversion returns drone::MeasureConversion:
//	'MeasureConversion'
//	'{'
//		('rate' rate=EFloat)?
//		'dimension' dimension=[drone::MeasureDimension|EString]
//	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Message returns Message:
	needResponse?='needResponse'
	name=EString
	'{'
		('timestamp' timestamp=EDate)?
		('involvedTaskExecutions' '(' involvedTaskExecutions+=[TaskExecution|EString] ( "," involvedTaskExecutions+=[TaskExecution|EString])* ')' )?
		('referredObjects' '(' referredObjects+=[drone::AreaObject|EString] ( "," referredObjects+=[drone::AreaObject|EString])* ')' )?
		('follows' follows=[Message|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('TTL' TTL=MeasureValue)?
	'}';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

UnicastCommunication returns UnicastCommunication:
	'UnicastCommunication'
	name=EString
	'{'
		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
		'message' message=[Message|EString]
		'target' target=[DynamicRobot|EString]
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

MulticastCommunication returns MulticastCommunication:
	'MulticastCommunication'
	name=EString
	'{'
		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
		'message' message=[Message|EString]
		'targets' '(' targets+=[DynamicRobot|EString] ( "," targets+=[DynamicRobot|EString])* ')' 
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

BroadcastCommunication returns BroadcastCommunication:
	'BroadcastCommunication'
	name=EString
	'{'
		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
		'message' message=[Message|EString]
		'targets' '(' targets+=[DynamicRobot|EString] ( "," targets+=[DynamicRobot|EString])* ')' 
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

enum TaskExecutionStatus returns TaskExecutionStatus:
				Ready = 'Ready' | Finished = 'Finished' | Suspended = 'Suspended' | InProgress = 'InProgress' | Waiting = 'Waiting';

EInt returns ecore::EInt:
	'-'? INT;
