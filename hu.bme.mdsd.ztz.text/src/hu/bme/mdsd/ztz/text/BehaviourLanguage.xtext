grammar hu.bme.mdsd.ztz.text.BehaviourLanguage with org.eclipse.xtext.common.Terminals

generate behaviourLanguage "http://www.mdsd.hu/behaviour/language"
import "http://www.mdsd.hu/behaviour"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mdsd.hu/drone" as drone

BehaviourLanguage:
	importModel=Import
	container=BehaviourContainer
	(statements+=Statement)*
;


Import:
	'import' importURI=STRING;


BehaviourContainer returns BehaviourContainer:
	{BehaviourContainer}
	'Declaration'
	'{'
		('DynamicRobots' '{' dynamicRobots+=DynamicRobot ( "," dynamicRobots+=DynamicRobot)* '}' )?
		('TaskExecutions' '{' taskExecutions+=TaskExecution ( "," taskExecutions+=TaskExecution)* '}' )?
		('TaskRequirements' '{' taskRequirements+=TaskRequirement ( "," taskRequirements+=TaskRequirement)* '}' )?
		('Keys' behaviourKeysContainer=BehaviouralPropertyKeyContainer)?
	'}'
;


PropertyValue returns drone::PropertyValue:
	StringValue | MeasureValue;


DynamicRobot returns DynamicRobot:
	name=EString ':' robot=[drone::Robot]
//	'{'
//		'status' status=RobotStatus
//		'robot' robot=[drone::Robot]
//		('executedTasks' '(' executedTasks+=[TaskExecution|EString] ( "," executedTasks+=[TaskExecution|EString])* ')' )?
//		('detectedObjects' '{' detectedObjects+=DetectedObject ( "," detectedObjects+=DetectedObject)* '}' )?
//		('collaborations' collaborations=RobotCollaboration)?
//		('messageRepository' messageRepository=MessageRepository)?
//		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
//	'}'
;


Statement:
	ActionStatement | MessageStatement | CollaborationStatement | DetectionStatement
;


ActionStatement:
	robot=[DynamicRobot] 'do' action=Action_Impl ('->' moreactions+=Action_Impl)*
;


MessageStatement:
	robot=[DynamicRobot] 'send' target=MessageTarget message=Message
;


CollaborationStatement:
	robot=[DynamicRobot] 'know' collaboration+=RobotCollaboration (',' collaboration+=RobotCollaboration )*
;


DetectionStatement:
	robot=[DynamicRobot] 'detect' object=[drone::AreaObject] (obstacle?='obstacle')?
;

MessageTarget:
	UniTarget | MultiTarget | AllTarget
;

UniTarget:
	target = [DynamicRobot]
;


MultiTarget:
	'(' target+=[DynamicRobot] (',' target+=[DynamicRobot] )*')'
;

AllTarget:
	target='*'
;

TaskExecution returns TaskExecution:
	name=EString ':' task=[drone::Task]
	'{'
		('status' status=TaskExecutionStatus)?
		('executors' '(' executors+=[DynamicRobot] ( "," executors+=[DynamicRobot])* ')' )?
		('executionTime' executionTime=MeasureValue)?
	'}';


TaskRequirement returns TaskRequirement:
	'TaskRequirement'
	name=EString
	'{'
		'participants' participants=EInt
		'taskExecution' taskExecution=[TaskExecution]
		('prerequisite' prerequisite=[TaskExecution])?
		('requiredCapabilities' '(' requiredCapabilities+=[drone::Capability] ( "," requiredCapabilities+=[drone::Capability])* ')' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('capabilityProperties' '{' capabilityProperties+=CapabilityProperties ( "," capabilityProperties+=CapabilityProperties)* '}' )?
	'}';

BehaviouralPropertyKeyContainer returns BehaviouralPropertyKeyContainer:
	{BehaviouralPropertyKeyContainer}
	'BehaviouralPropertyKeyContainer'
	name=EString
	'{'
		('keys' '{' keys+=PropertyKey ( "," keys+=PropertyKey)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;


//DetectedObject returns DetectedObject:
//	{DetectedObject}
//	' ' object=[drone::AreaObject] (obstacle?='obstacle')?
//;

RobotCollaboration returns RobotCollaboration:
		{RobotCollaboration}
		collaborator=[DynamicRobot]
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
;

//MessageRepository returns MessageRepository:
//	{MessageRepository}
//	'MessageRepository'
//	name=EString
//	'{'
//		('sendedMessages' '{' sendedMessages+=Message ( "," sendedMessages+=Message)* '}' )?
//	'}';

enum RobotStatus returns RobotStatus:
				Ready = 'Ready' | TurnedOff = 'TurnedOff' | Waiting = 'Waiting' | Executing = 'Executing';

Action_Impl returns Action:
	{Action}
	name=EString ('(' currentTaskExecution=[TaskExecution] ')')?
//	'{'
//		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}'
;


Property returns drone::Property:
	'Property'
	'{'
		'key' key=[drone::PropertyKey]
		'value' value=PropertyValue
	'}';

MeasureValue returns drone::MeasureValue:
	'MeasureValue'
	'{'
		('value' value=EFloat)?
		'dimension' dimension=[drone::MeasureDimension]
	'}';


CapabilityProperties returns drone::CapabilityProperties:
	'CapabilityProperties'
	'{'
		'capability' capability=[drone::Capability]
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';



EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;


PropertyKey returns drone::PropertyKey:
	{drone::PropertyKey}
	'PropertyKey'
	name=EString;

StringValue returns drone::StringValue:
	'StringValue'
	'{'
		'value' value=EString
	'}';


EBoolean returns ecore::EBoolean:
	'true' | 'false';

Message returns Message:
//	needResponse?='needResponse'
	name=EString
	(
	'{'
		('TaskExecutions' '(' involvedTaskExecutions+=[TaskExecution] ( "," involvedTaskExecutions+=[TaskExecution])* ')' )?
		('ReferredObjects' '(' referredObjects+=[drone::AreaObject] ( "," referredObjects+=[drone::AreaObject])* ')' )?
		('Follows' follows=[Message])?
		('Properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('TTL' TTL=MeasureValue)?
	'}'		
		
	)?

;


//UnicastCommunication returns UnicastCommunication:
//	'UnicastCommunication'
//	name=EString
//	'{'
//		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
//		'message' message=[Message|EString]
//		'target' target=[DynamicRobot|EString]
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';
//
//MulticastCommunication returns MulticastCommunication:
//	'MulticastCommunication'
//	name=EString
//	'{'
//		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
//		'message' message=[Message|EString]
//		'targets' '(' targets+=[DynamicRobot|EString] ( "," targets+=[DynamicRobot|EString])* ')' 
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';
//
//BroadcastCommunication returns BroadcastCommunication:
//	'BroadcastCommunication'
//	name=EString
//	'{'
//		('currentTaskExecution' currentTaskExecution=[TaskExecution|EString])?
//		'message' message=[Message|EString]
//		'targets' '(' targets+=[DynamicRobot|EString] ( "," targets+=[DynamicRobot|EString])* ')' 
//		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
//	'}';

enum TaskExecutionStatus returns TaskExecutionStatus:
				Ready = 'Ready' | Finished = 'Finished' | Suspended = 'Suspended' | InProgress = 'InProgress' | Waiting = 'Waiting';

EInt returns ecore::EInt:
	'-'? INT;
