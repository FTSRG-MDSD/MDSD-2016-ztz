grammar hu.bme.mdsd.ztz.text.BehaviourLanguage with org.eclipse.xtext.common.Terminals

generate behaviourLanguage "http://www.mdsd.hu/behaviour/language"
import "http://www.mdsd.hu/behaviour"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mdsd.hu/drone" as drone

BehaviourLanguage:
	importModel=Import
	container=BehaviourContainer
	(statements+=Statement)*
;

Import:
	'import' importURI=STRING;

BehaviourContainer returns BehaviourContainer:
	{BehaviourContainer}
	'Declaration'
	'{'
		('DynamicRobots' '{' dynamicRobots+=DynamicRobot ( "," dynamicRobots+=DynamicRobot)* '}' )?
		('TaskExecutions' '{' taskExecutions+=TaskExecution ( "," taskExecutions+=TaskExecution)* '}' )?
		('TaskRequirements' '{' taskRequirements+=TaskRequirement ( "," taskRequirements+=TaskRequirement)* '}' )?
		('Keys' behaviourKeysContainer=BehaviouralPropertyKeyContainer)?
	'}'
;

PropertyValue returns drone::PropertyValue:
	StringValue | MeasureValue;

DynamicRobot returns DynamicRobot:
	name=EString ':' robot=[drone::Robot]
;

Statement:
	AtomicStatement | ConditionalStatement | SynchronousStatement | ActionDeclarationStatement
;

AtomicStatement:
	ActionStatement | MessageStatement | CollaborationStatement | DetectionStatement | ExecutionStatement | StatusStatement
;

ConditionalStatement:
	'if' condition+=Condition ('or' condition+=Condition)* 'then' '{' (statements+=Statement)+ '}' ('else' '{' (otherStatements+=Statement)+ '}')?
;

SynchronousStatement:
	'sync' '{' (statements+=(ActionStatement | MessageStatement | DetectionStatement))+ '}'
;

ActionDeclarationStatement:
	'action' name=EString ('{' (properties+=[drone::PropertyKey])* '}')?
;

ActionStatement:
	robot=[DynamicRobot] 'do' action=ActionImplementation ('->' moreactions+=ActionImplementation)*
;

ActionImplementation:
	declaration=[ActionDeclarationStatement]
	('(' currentTaskExecution=[TaskExecution] ')')?
	('{' properties+=Property ( "," properties+=Property)* '}')?
	('[' targets+=[drone::AreaObject] (',' targets+=[drone::AreaObject])* ']')?
;

MessageStatement:
	robot=[DynamicRobot] 'send' target=MessageTarget message=Message
;

CollaborationStatement:
	robot=[DynamicRobot] 'know' collaboration+=RobotCollaboration (',' collaboration+=RobotCollaboration )*
;

DetectionStatement:
	robot=[DynamicRobot] 'detect' object=[drone::AreaObject] (obstacle?='obstacle')?
;

ExecutionStatement:
	robot=[DynamicRobot] 'exec' execution=[TaskExecution]
;

StatusStatement:
	RobotStatusStatement | TaskStatusStatement
;

RobotStatusStatement:
	robot=[DynamicRobot] 'set' status=RobotStatus	
;

TaskStatusStatement:
	task=[TaskExecution] 'set' status=TaskExecutionStatus
;

MessageTarget:
	UniTarget | MultiTarget | AllTarget
;

UniTarget:
	target = [DynamicRobot]
;

MultiTarget:
	'(' target+=[DynamicRobot] (',' target+=[DynamicRobot] )*')'
;

AllTarget:
	target='*'
;

Condition:
	{Condition}
	(leftTask=[TaskExecution] '.' 'status' compare=('==' | '!=') rightStatus=TaskExecutionStatus) |
	(leftRobot=[DynamicRobot] '.' 'status' compare=('==' | '!=') rightStatus=RobotStatus) |
	(leftMeasure=MeasureComparable  compare=('>'|'<'|'>='|'<='|'==' | '!=') rightMeasure=MeasureComparable)
;

MeasureComparable:
	(container=[DynamicRobot] '.' member=[drone::PropertyKey]) | value=PropertyValue
;

TaskExecution returns TaskExecution:
	name=EString ':' task=[drone::Task]
	'{'
		('executionTime' executionTime=MeasureValue)?
		('requirement' requirement=[TaskRequirement])?
	'}'
;

TaskRequirement returns TaskRequirement:
	'{'
		'name' name=EString
		'participants' participants=EInt
		'taskExecution' taskExecution=[TaskExecution]
		('prerequisite' prerequisite=[TaskExecution])?
		('requiredCapabilities' '(' requiredCapabilities+=[drone::Capability] ( "," requiredCapabilities+=[drone::Capability])* ')' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('capabilityProperties' '{' capabilityProperties+=CapabilityProperties ( "," capabilityProperties+=CapabilityProperties)* '}' )?
	'}';

BehaviouralPropertyKeyContainer returns BehaviouralPropertyKeyContainer:
	{BehaviouralPropertyKeyContainer}
	'{'
		keys+=PropertyKey ( "," keys+=PropertyKey)*
	'}'
;

EString returns ecore::EString:
	STRING | ID;


RobotCollaboration returns RobotCollaboration:
		{RobotCollaboration}
		collaborator=[DynamicRobot]
		( '{' properties+=Property ( "," properties+=Property)* '}' )?
;

enum RobotStatus returns EObject:
	Ready = 'RobotReady' | TurnedOff = 'RobotTurnedOff' | Waiting = 'RobotWaiting' | Executing = 'RobotExecuting'
;

//Action_Impl returns Action:
//	{Action}
//	name=EString ('(' currentTaskExecution=[TaskExecution] ')')?
//	('{' properties+=Property ( "," properties+=Property)* '}' )?
//;

Property returns drone::Property:
	'[' key=[drone::PropertyKey] '=' value=PropertyValue ']'
;

MeasureValue returns drone::MeasureValue:
	'measure 'value=EFloat 'in' dimension=[drone::MeasureDimension]
;


CapabilityProperties returns drone::CapabilityProperties:
	'CapabilityProperties'
	'{'
		'capability' capability=[drone::Capability]
		( '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}'
;


EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;


PropertyKey returns drone::PropertyKey:
	{drone::PropertyKey}
	name=EString;

StringValue returns drone::StringValue:
	value=EString
;


EBoolean returns ecore::EBoolean:
	'true' | 'false';

Message returns Message:
//	needResponse?='needResponse'
	name=EString
	(
	'{'
		('TaskExecutions' '(' involvedTaskExecutions+=[TaskExecution] ( "," involvedTaskExecutions+=[TaskExecution])* ')' )?
		('Objects' '(' referredObjects+=[drone::AreaObject] ( "," referredObjects+=[drone::AreaObject])* ')' )?
		('Follows' follows=[Message])?
		('Properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('TTL' TTL=MeasureValue)?
	'}'		
		
	)?

;


enum TaskExecutionStatus returns EObject:
	Ready = 'TaskReady' | Finished = 'TaskFinished' | Suspended = 'TaskSuspended' | InProgress = 'TaskInProgress' | Waiting = 'TaskWaiting'
;

EInt returns ecore::EInt:
	'-'? INT;
