/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.mdsd.ztz.text.behaviourLanguage.Import
import java.util.Iterator
import org.eclipse.emf.common.util.URI
import hu.bme.mdsd.ztz.text.manager.ResourceManager
import hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import hu.bme.mdsd.ztz.model.behaviour.BehaviourFactory
import hu.bme.mdsd.ztz.model.drone.Robot
import java.util.Map
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BehaviourLanguageGenerator extends AbstractGenerator {

	

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		println("generate")
		val manager = ResourceManager.instance

		val Iterator<Import> iterator = resource.allContents.filter(typeof(Import))
		if (iterator.hasNext) {
			val Import imp = iterator.next
			if (!imp.importURI.empty) {
				if (!manager.importedModelPath.equals(imp.importURI)) {
					
//					val URI modelPathUri = fsa.getURI(modelFolder + imp.importURI)
//					manager.importedModelPath = imp.importURI
//					println(modelPathUri)
//					manager.load(modelPathUri)
					manager.load(imp)
				}
			}
		}
		
		val Iterator<BehaviourContainer> containerIterator = resource.allContents.filter(typeof(BehaviourContainer))
		if (containerIterator.hasNext) {
			val container = containerIterator.next()
			
//			container.dynamicRobots.get(0).robot = manager.resource.allContents.filter(typeof(Robot)).filter().next()  
			
			val Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE
    		val Map<String, Object> m = reg.getExtensionToFactoryMap()
    		m.put("behaviour", new XMIResourceFactoryImpl())
			
			val ResourceSet resourceSet = new ResourceSetImpl();

			val resourceURI = fsa.getURI(ResourceManager.instance.modelFolder + "robots.behaviour")

			val resourceOfBehaviour = resourceSet.createResource(resourceURI)
			resourceOfBehaviour.getContents().clear();

//			factory = RailwayFactory.eINSTANCE;
//			val newContainer = BehaviourFactory.eINSTANCE.createBehaviourContainer()
			resourceOfBehaviour.getContents().add(container);
			
			resourceOfBehaviour.save(null)
			
		}
		
	}
}
