/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.generator

import com.fasterxml.jackson.databind.JsonNode
import hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer
import hu.bme.mdsd.ztz.text.behaviourLanguage.Import
import hu.bme.mdsd.ztz.text.manager.ResourceManager
import hu.bme.mdsd.ztz.text.parser.StatementParser
import java.util.Iterator
import java.util.Map
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BehaviourLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val manager = ResourceManager.instance
		importResource(resource, manager)

		val Iterator<BehaviourContainer> containerIterator = resource.allContents.filter(typeof(BehaviourContainer))
		if (containerIterator.hasNext) {
			val statementParser = new StatementParser()
			val jsonNode = statementParser.parseStatements(resource)
	
			generateBehaviour(resource, fsa)
			
			generateActions(resource, fsa, jsonNode)
		}
	}

	def protected importResource(Resource resource, ResourceManager manager) {
		val Iterator<Import> iterator = resource.allContents.filter(typeof(Import))
		if (iterator.hasNext) {
			val Import imp = iterator.next
			if (!imp.importURI.empty) {
				if (!manager.importedModelPath.equals(imp.importURI)) {
					manager.load(imp)
				}
			}
		}
	}

	protected def generateBehaviour(Resource resource, IFileSystemAccess2 fsa) {
		val Iterator<BehaviourContainer> containerIterator = resource.allContents.filter(typeof(BehaviourContainer))
		if (containerIterator.hasNext) {
			val container = containerIterator.next()

			val Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE
			val Map<String, Object> m = reg.getExtensionToFactoryMap()
			m.put("behaviour", new XMIResourceFactoryImpl())

			val ResourceSet resourceSet = new ResourceSetImpl();

			val resourceURI = fsa.getURI(ResourceManager.instance.modelFolder + "robots.behaviour")

			val resourceOfBehaviour = resourceSet.createResource(resourceURI)
			resourceOfBehaviour.getContents().clear()

			resourceOfBehaviour.getContents().add(container)

			resourceOfBehaviour.save(null)
		}
	}
	
	protected def generateActions(Resource resource, IFileSystemAccess2 fsa, JsonNode jsonNode) {
//		val jsonGenerator = new JsonGenerator()
		fsa.generateFile("out.json", jsonNode.toString)
//		jsonGenerator.generateJson(resource, fsa, orderedStatements)
	}

	

}
