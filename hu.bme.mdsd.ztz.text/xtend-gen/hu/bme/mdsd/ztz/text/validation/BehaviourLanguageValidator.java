/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.validation;

import hu.bme.mdsd.ztz.text.behaviourLanguage.BehaviourLanguagePackage;
import hu.bme.mdsd.ztz.text.behaviourLanguage.Import;
import hu.bme.mdsd.ztz.text.manager.ResourceManager;
import hu.bme.mdsd.ztz.text.validation.AbstractBehaviourLanguageValidator;
import hu.bme.mdsd.ztz.text.validation.ErrorCodes;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class BehaviourLanguageValidator extends AbstractBehaviourLanguageValidator {
  @Check
  public Resource handleImport(final Import imp) {
    Resource _xifexpression = null;
    String _importURI = imp.getImportURI();
    boolean _isEmpty = _importURI.isEmpty();
    if (_isEmpty) {
      this.error("Import cannot be empty", BehaviourLanguagePackage.Literals.IMPORT__IMPORT_URI, ErrorCodes.INVALID_IMPORT);
    } else {
      Resource _xifexpression_1 = null;
      String _importURI_1 = imp.getImportURI();
      ResourceManager _instance = ResourceManager.getInstance();
      String _acceptedDomain = _instance.getAcceptedDomain();
      boolean _endsWith = _importURI_1.endsWith(_acceptedDomain);
      if (_endsWith) {
        Resource _xblockexpression = null;
        {
          final ResourceManager manager = ResourceManager.getInstance();
          _xblockexpression = manager.load(imp);
        }
        _xifexpression_1 = _xblockexpression;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
