/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import hu.bme.mdsd.ztz.model.behaviour.Action;
import hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer;
import hu.bme.mdsd.ztz.model.behaviour.BehaviourFactory;
import hu.bme.mdsd.ztz.model.behaviour.BroadcastCommunication;
import hu.bme.mdsd.ztz.model.behaviour.DetectedObject;
import hu.bme.mdsd.ztz.model.behaviour.DynamicRobot;
import hu.bme.mdsd.ztz.model.behaviour.Message;
import hu.bme.mdsd.ztz.model.behaviour.MessageRepository;
import hu.bme.mdsd.ztz.model.behaviour.MulticastCommunication;
import hu.bme.mdsd.ztz.model.behaviour.RobotCollaboration;
import hu.bme.mdsd.ztz.model.behaviour.UnicastCommunication;
import hu.bme.mdsd.ztz.model.drone.AreaObject;
import hu.bme.mdsd.ztz.text.behaviourLanguage.ActionStatement;
import hu.bme.mdsd.ztz.text.behaviourLanguage.AllTarget;
import hu.bme.mdsd.ztz.text.behaviourLanguage.CollaborationStatement;
import hu.bme.mdsd.ztz.text.behaviourLanguage.DetectionStatement;
import hu.bme.mdsd.ztz.text.behaviourLanguage.Import;
import hu.bme.mdsd.ztz.text.behaviourLanguage.MessageStatement;
import hu.bme.mdsd.ztz.text.behaviourLanguage.MessageTarget;
import hu.bme.mdsd.ztz.text.behaviourLanguage.MultiTarget;
import hu.bme.mdsd.ztz.text.behaviourLanguage.Statement;
import hu.bme.mdsd.ztz.text.behaviourLanguage.UniTarget;
import hu.bme.mdsd.ztz.text.manager.ResourceManager;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BehaviourLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final ResourceManager manager = ResourceManager.getInstance();
    this.importResource(resource, manager);
    this.generateBehaviour(resource, fsa);
  }
  
  protected void generateBehaviour(final Resource resource, final IFileSystemAccess2 fsa) {
    try {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      final Iterator<BehaviourContainer> containerIterator = Iterators.<BehaviourContainer>filter(_allContents, BehaviourContainer.class);
      boolean _hasNext = containerIterator.hasNext();
      if (_hasNext) {
        final BehaviourContainer container = containerIterator.next();
        final Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        final Map<String, Object> m = reg.getExtensionToFactoryMap();
        XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
        m.put("behaviour", _xMIResourceFactoryImpl);
        final ResourceSet resourceSet = new ResourceSetImpl();
        ResourceManager _instance = ResourceManager.getInstance();
        String _modelFolder = _instance.getModelFolder();
        String _plus = (_modelFolder + "robots.behaviour");
        final URI resourceURI = fsa.getURI(_plus);
        final Resource resourceOfBehaviour = resourceSet.createResource(resourceURI);
        EList<EObject> _contents = resourceOfBehaviour.getContents();
        _contents.clear();
        EList<EObject> _contents_1 = resourceOfBehaviour.getContents();
        _contents_1.add(container);
        this.parseStatements(resource, resourceOfBehaviour);
        resourceOfBehaviour.save(null);
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected void parseStatements(final Resource resource, final Resource resourceOfBehaviour) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    final Iterator<Statement> statementIter = Iterators.<Statement>filter(_allContents, Statement.class);
    while (statementIter.hasNext()) {
      {
        final Statement statement = statementIter.next();
        this.parseStatement(statement, resourceOfBehaviour);
      }
    }
  }
  
  protected Boolean _parseStatement(final ActionStatement statement, final Resource resourceOfBehaviour) {
    boolean _xblockexpression = false;
    {
      DynamicRobot _robot = statement.getRobot();
      EList<Action> _actions = _robot.getActions();
      Action _action = statement.getAction();
      _actions.add(_action);
      boolean _xifexpression = false;
      EList<Action> _moreactions = statement.getMoreactions();
      boolean _isEmpty = _moreactions.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        DynamicRobot _robot_1 = statement.getRobot();
        EList<Action> _actions_1 = _robot_1.getActions();
        EList<Action> _moreactions_1 = statement.getMoreactions();
        _xifexpression = _actions_1.addAll(_moreactions_1);
      }
      _xblockexpression = _xifexpression;
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  protected Boolean _parseStatement(final DetectionStatement statement, final Resource resourceOfBehaviour) {
    boolean _xblockexpression = false;
    {
      final DynamicRobot robot = statement.getRobot();
      AreaObject _object = statement.getObject();
      this.removeAreaObject(robot, _object);
      final DetectedObject detectedObject = BehaviourFactory.eINSTANCE.createDetectedObject();
      AreaObject _object_1 = statement.getObject();
      detectedObject.setObject(_object_1);
      boolean _isObstacle = statement.isObstacle();
      detectedObject.setObstacle(_isObstacle);
      EList<DetectedObject> _detectedObjects = robot.getDetectedObjects();
      _xblockexpression = _detectedObjects.add(detectedObject);
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  protected Boolean _parseStatement(final MessageStatement statement, final Resource resourceOfBehaviour) {
    Boolean _xblockexpression = null;
    {
      final DynamicRobot senderRobot = statement.getRobot();
      this.initMessageRepository(senderRobot);
      final MessageTarget messageTarget = statement.getTarget();
      final Message message = statement.getMessage();
      _xblockexpression = this.parseMessageTarget(messageTarget, senderRobot, message);
    }
    return _xblockexpression;
  }
  
  public boolean detected(final DynamicRobot robot, final AreaObject areaObject) {
    EList<DetectedObject> _detectedObjects = robot.getDetectedObjects();
    for (final DetectedObject detectedObj : _detectedObjects) {
      AreaObject _object = detectedObj.getObject();
      boolean _equals = Objects.equal(_object, areaObject);
      if (_equals) {
        return true;
      }
    }
    return false;
  }
  
  public boolean removeAreaObject(final DynamicRobot robot, final AreaObject areaObject) {
    boolean _xblockexpression = false;
    {
      DetectedObject removeObject = null;
      EList<DetectedObject> _detectedObjects = robot.getDetectedObjects();
      for (final DetectedObject detectedObj : _detectedObjects) {
        AreaObject _object = detectedObj.getObject();
        boolean _equals = Objects.equal(_object, areaObject);
        if (_equals) {
          removeObject = detectedObj;
        }
      }
      EList<DetectedObject> _detectedObjects_1 = robot.getDetectedObjects();
      _xblockexpression = _detectedObjects_1.remove(removeObject);
    }
    return _xblockexpression;
  }
  
  public MessageRepository initMessageRepository(final DynamicRobot robot) {
    MessageRepository messageRepository = robot.getMessageRepository();
    MessageRepository _messageRepository = robot.getMessageRepository();
    boolean _equals = Objects.equal(_messageRepository, null);
    if (_equals) {
      MessageRepository _createMessageRepository = BehaviourFactory.eINSTANCE.createMessageRepository();
      messageRepository = _createMessageRepository;
      String _name = robot.getName();
      String _plus = (_name + "MessageRepository");
      messageRepository.setName(_plus);
      messageRepository.setRobot(robot);
    }
    return messageRepository;
  }
  
  protected Boolean _parseMessageTarget(final UniTarget target, final DynamicRobot senderRobot, final Message message) {
    boolean _xblockexpression = false;
    {
      InputOutput.<String>println("uni target");
      DynamicRobot _target = target.getTarget();
      boolean _reachableRobot = this.reachableRobot(senderRobot, _target);
      boolean _not = (!_reachableRobot);
      if (_not) {
        InputOutput.<String>println("not reachable");
        return null;
      }
      DynamicRobot _target_1 = target.getTarget();
      this.initMessageRepository(_target_1);
      final UnicastCommunication action = BehaviourFactory.eINSTANCE.createUnicastCommunication();
      action.setMessage(message);
      DynamicRobot _target_2 = target.getTarget();
      action.setTarget(_target_2);
      this.addAction(senderRobot, action);
      _xblockexpression = this.addSendedMessage(senderRobot, message);
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  protected Boolean _parseMessageTarget(final MultiTarget target, final DynamicRobot senderRobot, final Message message) {
    boolean _xblockexpression = false;
    {
      EList<DynamicRobot> _target = target.getTarget();
      for (final DynamicRobot targetRobot : _target) {
        boolean _reachableRobot = this.reachableRobot(senderRobot, targetRobot);
        boolean _not = (!_reachableRobot);
        if (_not) {
          return null;
        }
      }
      EList<DynamicRobot> _target_1 = target.getTarget();
      for (final DynamicRobot targetRobot_1 : _target_1) {
        this.initMessageRepository(targetRobot_1);
      }
      final MulticastCommunication action = BehaviourFactory.eINSTANCE.createMulticastCommunication();
      action.setMessage(message);
      EList<DynamicRobot> _targets = action.getTargets();
      EList<DynamicRobot> _target_2 = target.getTarget();
      _targets.addAll(_target_2);
      this.addAction(senderRobot, action);
      _xblockexpression = this.addSendedMessage(senderRobot, message);
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  protected Boolean _parseMessageTarget(final AllTarget target, final DynamicRobot senderRobot, final Message message) {
    boolean _xblockexpression = false;
    {
      EList<RobotCollaboration> _collaborations = senderRobot.getCollaborations();
      boolean _isEmpty = _collaborations.isEmpty();
      if (_isEmpty) {
        return null;
      }
      final BroadcastCommunication action = BehaviourFactory.eINSTANCE.createBroadcastCommunication();
      action.setMessage(message);
      final Set<DynamicRobot> targetRobots = new HashSet<DynamicRobot>();
      EList<RobotCollaboration> _collaborations_1 = senderRobot.getCollaborations();
      for (final RobotCollaboration collab : _collaborations_1) {
        DynamicRobot _collaborator = collab.getCollaborator();
        targetRobots.add(_collaborator);
      }
      for (final DynamicRobot robot : targetRobots) {
        this.initMessageRepository(robot);
      }
      EList<DynamicRobot> _targets = action.getTargets();
      _targets.addAll(targetRobots);
      this.addAction(senderRobot, action);
      _xblockexpression = this.addSendedMessage(senderRobot, message);
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  public boolean addAction(final DynamicRobot senderRobot, final Action action) {
    EList<Action> _actions = senderRobot.getActions();
    return _actions.add(action);
  }
  
  public boolean addSendedMessage(final DynamicRobot senderRobot, final Message message) {
    MessageRepository _messageRepository = senderRobot.getMessageRepository();
    EList<Message> _sendedMessages = _messageRepository.getSendedMessages();
    return _sendedMessages.add(message);
  }
  
  public boolean reachableRobot(final DynamicRobot origin, final DynamicRobot target) {
    EList<RobotCollaboration> _collaborations = origin.getCollaborations();
    for (final RobotCollaboration collab : _collaborations) {
      DynamicRobot _collaborator = collab.getCollaborator();
      boolean _equals = Objects.equal(_collaborator, target);
      if (_equals) {
        return true;
      }
    }
    return false;
  }
  
  protected Boolean _parseStatement(final CollaborationStatement statement, final Resource resourceOfBehaviour) {
    final DynamicRobot robot = statement.getRobot();
    final HashSet<DynamicRobot> connectedRobots = new HashSet<DynamicRobot>();
    EList<RobotCollaboration> _collaboration = statement.getCollaboration();
    for (final RobotCollaboration possibleCollaboration : _collaboration) {
      {
        boolean inCollaboration = false;
        EList<RobotCollaboration> _collaborations = robot.getCollaborations();
        for (final RobotCollaboration collaboration : _collaborations) {
          DynamicRobot _collaborator = collaboration.getCollaborator();
          DynamicRobot _collaborator_1 = possibleCollaboration.getCollaborator();
          boolean _equals = Objects.equal(_collaborator, _collaborator_1);
          if (_equals) {
            inCollaboration = true;
          }
        }
        if ((!inCollaboration)) {
          DynamicRobot _collaborator_2 = possibleCollaboration.getCollaborator();
          boolean _notEquals = (!Objects.equal(robot, _collaborator_2));
          if (_notEquals) {
            DynamicRobot _collaborator_3 = possibleCollaboration.getCollaborator();
            connectedRobots.add(_collaborator_3);
          }
        }
      }
    }
    for (final DynamicRobot r : connectedRobots) {
      {
        final RobotCollaboration newCollaboration = BehaviourFactory.eINSTANCE.createRobotCollaboration();
        newCollaboration.setCollaborator(r);
        EList<RobotCollaboration> _collaborations = robot.getCollaborations();
        _collaborations.add(newCollaboration);
        final RobotCollaboration newOppositeCollaboration = BehaviourFactory.eINSTANCE.createRobotCollaboration();
        newOppositeCollaboration.setCollaborator(robot);
        EList<RobotCollaboration> _collaborations_1 = r.getCollaborations();
        _collaborations_1.add(newOppositeCollaboration);
      }
    }
    return null;
  }
  
  protected Resource importResource(final Resource resource, final ResourceManager manager) {
    Resource _xblockexpression = null;
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      final Iterator<Import> iterator = Iterators.<Import>filter(_allContents, Import.class);
      Resource _xifexpression = null;
      boolean _hasNext = iterator.hasNext();
      if (_hasNext) {
        Resource _xblockexpression_1 = null;
        {
          final Import imp = iterator.next();
          Resource _xifexpression_1 = null;
          String _importURI = imp.getImportURI();
          boolean _isEmpty = _importURI.isEmpty();
          boolean _not = (!_isEmpty);
          if (_not) {
            Resource _xifexpression_2 = null;
            String _importedModelPath = manager.getImportedModelPath();
            String _importURI_1 = imp.getImportURI();
            boolean _equals = _importedModelPath.equals(_importURI_1);
            boolean _not_1 = (!_equals);
            if (_not_1) {
              _xifexpression_2 = manager.load(imp);
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public Boolean parseStatement(final Statement statement, final Resource resourceOfBehaviour) {
    if (statement instanceof ActionStatement) {
      return _parseStatement((ActionStatement)statement, resourceOfBehaviour);
    } else if (statement instanceof CollaborationStatement) {
      return _parseStatement((CollaborationStatement)statement, resourceOfBehaviour);
    } else if (statement instanceof DetectionStatement) {
      return _parseStatement((DetectionStatement)statement, resourceOfBehaviour);
    } else if (statement instanceof MessageStatement) {
      return _parseStatement((MessageStatement)statement, resourceOfBehaviour);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(statement, resourceOfBehaviour).toString());
    }
  }
  
  public Boolean parseMessageTarget(final MessageTarget target, final DynamicRobot senderRobot, final Message message) {
    if (target instanceof AllTarget) {
      return _parseMessageTarget((AllTarget)target, senderRobot, message);
    } else if (target instanceof MultiTarget) {
      return _parseMessageTarget((MultiTarget)target, senderRobot, message);
    } else if (target instanceof UniTarget) {
      return _parseMessageTarget((UniTarget)target, senderRobot, message);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(target, senderRobot, message).toString());
    }
  }
}
