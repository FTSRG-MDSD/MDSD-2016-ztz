/**
 */
package hu.bme.mdsd.ztz.model.behaviour.provider;

import hu.bme.mdsd.ztz.model.behaviour.util.BehaviourAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourItemProviderAdapterFactory extends BehaviourAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
        /**
         * This keeps track of the root adapter factory that delegates to this adapter factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ComposedAdapterFactory parentAdapterFactory;

        /**
         * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected IChangeNotifier changeNotifier = new ChangeNotifier();

        /**
         * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Collection<Object> supportedTypes = new ArrayList<Object>();

        /**
         * This constructs an instance.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public BehaviourItemProviderAdapterFactory() {
                supportedTypes.add(IEditingDomainItemProvider.class);
                supportedTypes.add(IStructuredItemContentProvider.class);
                supportedTypes.add(ITreeItemContentProvider.class);
                supportedTypes.add(IItemLabelProvider.class);
                supportedTypes.add(IItemPropertySource.class);
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected BehaviourContainerItemProvider behaviourContainerItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createBehaviourContainerAdapter() {
                if (behaviourContainerItemProvider == null) {
                        behaviourContainerItemProvider = new BehaviourContainerItemProvider(this);
                }

                return behaviourContainerItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.Message} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MessageItemProvider messageItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.Message}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMessageAdapter() {
                if (messageItemProvider == null) {
                        messageItemProvider = new MessageItemProvider(this);
                }

                return messageItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.UnicastCommunication} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected UnicastCommunicationItemProvider unicastCommunicationItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.UnicastCommunication}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createUnicastCommunicationAdapter() {
                if (unicastCommunicationItemProvider == null) {
                        unicastCommunicationItemProvider = new UnicastCommunicationItemProvider(this);
                }

                return unicastCommunicationItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.MulticastCommunication} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MulticastCommunicationItemProvider multicastCommunicationItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.MulticastCommunication}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMulticastCommunicationAdapter() {
                if (multicastCommunicationItemProvider == null) {
                        multicastCommunicationItemProvider = new MulticastCommunicationItemProvider(this);
                }

                return multicastCommunicationItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.BroadcastCommunication} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected BroadcastCommunicationItemProvider broadcastCommunicationItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.BroadcastCommunication}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createBroadcastCommunicationAdapter() {
                if (broadcastCommunicationItemProvider == null) {
                        broadcastCommunicationItemProvider = new BroadcastCommunicationItemProvider(this);
                }

                return broadcastCommunicationItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.MessageRepository} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MessageRepositoryItemProvider messageRepositoryItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.MessageRepository}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMessageRepositoryAdapter() {
                if (messageRepositoryItemProvider == null) {
                        messageRepositoryItemProvider = new MessageRepositoryItemProvider(this);
                }

                return messageRepositoryItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.Action} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ActionItemProvider actionItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.Action}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createActionAdapter() {
                if (actionItemProvider == null) {
                        actionItemProvider = new ActionItemProvider(this);
                }

                return actionItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.TaskExecution} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TaskExecutionItemProvider taskExecutionItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.TaskExecution}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTaskExecutionAdapter() {
                if (taskExecutionItemProvider == null) {
                        taskExecutionItemProvider = new TaskExecutionItemProvider(this);
                }

                return taskExecutionItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.RobotCollaboration} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected RobotCollaborationItemProvider robotCollaborationItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.RobotCollaboration}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createRobotCollaborationAdapter() {
                if (robotCollaborationItemProvider == null) {
                        robotCollaborationItemProvider = new RobotCollaborationItemProvider(this);
                }

                return robotCollaborationItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.DetectedObject} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DetectedObjectItemProvider detectedObjectItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.DetectedObject}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDetectedObjectAdapter() {
                if (detectedObjectItemProvider == null) {
                        detectedObjectItemProvider = new DetectedObjectItemProvider(this);
                }

                return detectedObjectItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.DynamicRobot} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DynamicRobotItemProvider dynamicRobotItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.DynamicRobot}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDynamicRobotAdapter() {
                if (dynamicRobotItemProvider == null) {
                        dynamicRobotItemProvider = new DynamicRobotItemProvider(this);
                }

                return dynamicRobotItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.TaskRequirement} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TaskRequirementItemProvider taskRequirementItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.TaskRequirement}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTaskRequirementAdapter() {
                if (taskRequirementItemProvider == null) {
                        taskRequirementItemProvider = new TaskRequirementItemProvider(this);
                }

                return taskRequirementItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link hu.bme.mdsd.ztz.model.behaviour.BehaviouralPropertyKeyContainer} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected BehaviouralPropertyKeyContainerItemProvider behaviouralPropertyKeyContainerItemProvider;

        /**
         * This creates an adapter for a {@link hu.bme.mdsd.ztz.model.behaviour.BehaviouralPropertyKeyContainer}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createBehaviouralPropertyKeyContainerAdapter() {
                if (behaviouralPropertyKeyContainerItemProvider == null) {
                        behaviouralPropertyKeyContainerItemProvider = new BehaviouralPropertyKeyContainerItemProvider(this);
                }

                return behaviouralPropertyKeyContainerItemProvider;
        }

        /**
         * This returns the root adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public ComposeableAdapterFactory getRootAdapterFactory() {
                return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
        }

        /**
         * This sets the composed adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
                this.parentAdapterFactory = parentAdapterFactory;
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public boolean isFactoryForType(Object type) {
                return supportedTypes.contains(type) || super.isFactoryForType(type);
        }

        /**
         * This implementation substitutes the factory itself as the key for the adapter.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter adapt(Notifier notifier, Object type) {
                return super.adapt(notifier, this);
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Object adapt(Object object, Object type) {
                if (isFactoryForType(type)) {
                        Object adapter = super.adapt(object, type);
                        if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                                return adapter;
                        }
                }

                return null;
        }

        /**
         * This adds a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void addListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.addListener(notifyChangedListener);
        }

        /**
         * This removes a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void removeListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.removeListener(notifyChangedListener);
        }

        /**
         * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void fireNotifyChanged(Notification notification) {
                changeNotifier.fireNotifyChanged(notification);

                if (parentAdapterFactory != null) {
                        parentAdapterFactory.fireNotifyChanged(notification);
                }
        }

        /**
         * This disposes all of the item providers created by this factory. 
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void dispose() {
                if (behaviourContainerItemProvider != null) behaviourContainerItemProvider.dispose();
                if (messageItemProvider != null) messageItemProvider.dispose();
                if (unicastCommunicationItemProvider != null) unicastCommunicationItemProvider.dispose();
                if (multicastCommunicationItemProvider != null) multicastCommunicationItemProvider.dispose();
                if (broadcastCommunicationItemProvider != null) broadcastCommunicationItemProvider.dispose();
                if (messageRepositoryItemProvider != null) messageRepositoryItemProvider.dispose();
                if (actionItemProvider != null) actionItemProvider.dispose();
                if (taskExecutionItemProvider != null) taskExecutionItemProvider.dispose();
                if (robotCollaborationItemProvider != null) robotCollaborationItemProvider.dispose();
                if (detectedObjectItemProvider != null) detectedObjectItemProvider.dispose();
                if (dynamicRobotItemProvider != null) dynamicRobotItemProvider.dispose();
                if (taskRequirementItemProvider != null) taskRequirementItemProvider.dispose();
                if (behaviouralPropertyKeyContainerItemProvider != null) behaviouralPropertyKeyContainerItemProvider.dispose();
        }

}
