/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mdsd.ztz.text.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.quickfix.Fix
import hu.bme.mdsd.ztz.text.validation.ErrorCodes
import hu.bme.mdsd.ztz.model.behaviour.Message
import hu.bme.mdsd.ztz.text.behaviourLanguage.MessageTarget
import hu.bme.mdsd.ztz.text.behaviourLanguage.MessageStatement
import hu.bme.mdsd.ztz.text.behaviourLanguage.BehaviourLanguage
import hu.bme.mdsd.ztz.text.behaviourLanguage.BehaviourLanguageFactory
import hu.bme.mdsd.ztz.model.behaviour.BehaviourFactory
import hu.bme.mdsd.ztz.text.behaviourLanguage.UniTarget
import hu.bme.mdsd.ztz.model.behaviour.DynamicRobot
import hu.bme.mdsd.ztz.text.behaviourLanguage.ActionImplementation
import hu.bme.mdsd.ztz.text.behaviourLanguage.ActionDeclarationStatement
import hu.bme.mdsd.ztz.text.behaviourLanguage.BehaviourLanguagePackage
import hu.bme.mdsd.ztz.model.behaviour.BehaviourContainer

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class BehaviourLanguageQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(ErrorCodes.NOT_IN_COLLABORATION)
	def fixMissingCollaboration(Issue issue, IssueResolutionAcceptor acceptor) {
		val modificationContext = modificationContextFactory.createModificationContext(issue)
		
		acceptor.accept(issue, "Add new collaboration", "", "") [
			element, context |
				val messageTarget = element as MessageTarget
				val statement = messageTarget.eContainer as MessageStatement			
				val language = statement.eContainer as BehaviourLanguage
				
				val robots = messageTarget.eResource.allContents.filter(DynamicRobot).toSet
				var DynamicRobot target
				for (DynamicRobot r : robots) {
					if (issue.data.get(0).equals(r.name)) {
						target = r
					}
				}
				
//				if (messageTarget instanceof UniTarget) {
					val newCollaborationStatement = BehaviourLanguageFactory.eINSTANCE.createCollaborationStatement
					newCollaborationStatement.robot = statement.robot
					
					val newCollaboration = BehaviourFactory.eINSTANCE.createRobotCollaboration
//					newCollaboration.collaborator = messageTarget.target
					newCollaboration.collaborator = target 
					
					newCollaborationStatement.collaboration.add(newCollaboration)
					language.statements.add(0, newCollaborationStatement)
//				}
			
		]
	}

//	@Fix(ErrorCodes.SAME_MESSAGE_NAME)
//	def changeMessageName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Change message', 'Change the message name.', 'upcase.png') [
//			element, context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//			val message = element as Message
//			val oldMessageName = message.name 
//			message.name = oldMessageName + "2"
//		]
//	}
	
	@Fix(ErrorCodes.MISSING_ACTION_DECLARATION)
	def fixMissingActionDeclaration(Issue issue, IssueResolutionAcceptor acceptor) {
		val modificationContext = modificationContextFactory.createModificationContext(issue)
		
		acceptor.accept(issue, "Add new action", "", "") [
			element, context |
				val actionImp = element as ActionImplementation
				val document = context.xtextDocument				
				val actionName = document.get(issue.offset,issue.length)

				val language = actionImp.eResource.contents.get(0) as BehaviourLanguage
				
				val ActionDeclarationStatement newActionDeclaration = BehaviourLanguageFactory.eINSTANCE.createActionDeclarationStatement
				newActionDeclaration.name = actionName
				newActionDeclaration.properties.addAll(actionImp.declaration.properties)
				
				language.statements.add(0, newActionDeclaration)
			
		]
	}
	
	@Fix(ErrorCodes.SAME_COLLABORATOR)
	def fixSelfCollaboration(Issue issue, IssueResolutionAcceptor acceptor) {
		val modificationContext = modificationContextFactory.createModificationContext(issue)

		acceptor.accept(issue, "Change the collaborator to " + issue.data.get(0), "", "") [
			element, context |
				val xtextDocument = context.xtextDocument
				xtextDocument.replace(issue.offset, issue.length, issue.data.get(0))
		]
	}

}
