package hu.bme.mdsd.ztz.model.constraints

import "http://www.mdsd.hu/drone"

@Constraint(
	key = {"measure"},
	severity = "error", 
	message = "$measure$ has the same converted measure!",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern sameMeasure(measure: MeasureDimension, convertedMeasure: MeasureDimension) {
	MeasureDimension.conversions.dimension(measure, convertedMeasure);
	convertedMeasure == measure;
}


@Constraint(
	key = {"conversion"},
	severity = "error",
	message = "Conversion rate must not be zero!",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern nullMeasureConversionValue(conversion: MeasureConversion) {
	MeasureConversion.rate(conversion, rate);
	check (rate == 0.0);
}


pattern robotHasCapability(robot: Robot, capability: Capability) {
	Robot.capabilities(robot, capability);
}


@Constraint (
	key = {"robot"},
	severity = "warning",
	message = "$robot$ does not have any batteries!",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern noBattery(robot: Robot) {
	neg find robotHasBattery(robot, _);
}

pattern robotHasBattery(robot: Robot, battery: Battery) {
	Robot.batteries(robot, battery);
}

@Constraint (
	key = {"robot", "size"},
	severity = "warning",
	message = "Size dimensions of $robot$ are not equal.",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern sizeDimensionsDiffer(robot: Robot, size: Size) {
	Robot.size(robot, size);
	Size.height.dimension(size, heightDim);
	Size.length.dimension(size, lengthDim);
	
	heightDim != lengthDim;
} or {
	Robot.size(robot, size);
	Size.height.dimension(size, heightDim);
	Size.width.dimension(size, widthDim);
	
	heightDim != widthDim;
} or {
	Robot.size(robot, size);
	Size.length.dimension(size, lengthDim);
	Size.width.dimension(size, widthDim);
	
	lengthDim != widthDim;
}

@Constraint (
	key = {"robot", "size"},
	severity = "error",
	message = "Size dimensions of $robot$ are not compatible (cannot be converted).",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern sizeDimensionsNotCompatible(robot: Robot, size: Size) {
	find sizeDimensionsDiffer(robot, size);
	Size.height.dimension(size, heightDim);
	Size.length.dimension(size, lengthDim);
	heightDim != lengthDim;
	neg find conversionAvailable(heightDim, lengthDim);
} or {
	find sizeDimensionsDiffer(robot, size);
	Size.height.dimension(size, heightDim);
	Size.width.dimension(size, widthDim);
	heightDim != widthDim;
	neg find conversionAvailable(heightDim, widthDim);
} or {
	find sizeDimensionsDiffer(robot, size);
	Size.length.dimension(size, lengthDim);
	Size.width.dimension(size, widthDim);
	lengthDim != widthDim;
	neg find conversionAvailable(lengthDim, widthDim);
}

pattern directConversionAvailable(dim1: MeasureDimension, dim2: MeasureDimension) {
	MeasureDimension.conversions.dimension(dim1, dim2);
} or {
	MeasureDimension.conversions.dimension(dim2, dim1);
}

pattern conversionAvailable(dim1: MeasureDimension, dim2: MeasureDimension) {
	find directConversionAvailable+(dim1, dim2);
	dim1 != dim2;
}

@Constraint(
	key = {"robot"},
	severity = "error",
	message = "Not all of $robot$'s task are from the same mission.",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern multipleMission(robot: Robot) {
	Robot.tasks.mission(robot, mission1);
	Robot.tasks.mission(robot, mission2);
	
	mission1 != mission2;
}


@Constraint(
	key = {"mission"},
	severity = "warning",
	message = "$mission$ does not contain any tasks.",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern emptyMission(mission: Mission) {
	neg find missionContainsTask(mission, _);
}

pattern missionContainsTask(mission: Mission, task: Task) {
	Mission.tasks(mission, task);
}


@Constraint(
	key = {"robot", "capability"},
	severity = "error",
	message = "Capability properties for $capability$ are multiply defined in $robot$.",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern multipleCapabilityProperties(robot: Robot, capability: Capability) {
	Robot.capabilityProperties(robot, capProp1);
	CapabilityProperties.capability(capProp1, capability);
	Robot.capabilityProperties(robot, capProp2);
	CapabilityProperties.capability(capProp2, capability);
	
	capProp1 != capProp2;
}


@Constraint(
	key = {"robot", "capability"},
	severity = "error",
	message = "$robot$ has capability properties for unlinked capability ($capability$).",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern notCorrectlyLinkedCapabilityPropertiesToRobot(robot: Robot, capability: Capability) {
	Robot.capabilityProperties.capability(robot, capability);
	neg find robotHasCapability(robot, capability);
}


@Constraint(
	key = {"robot", "capability", "equipment"},
	severity = "error",
	message = "$robot$ has equipment ($equipment$) that provides an unlinked capability ($capability$).",
	targetEditorId = "hu.bme.mdsd.ztz.model.drone.presentation.DroneEditorID"
)
pattern notCorrectlyLinkedEquipmentToRobot(robot: Robot, capability: Capability, equipment: Equipment) {
	Robot.equipments(robot, equipment);
	Equipment.facilitate(equipment, capability);
	neg find robotHasCapability(robot, capability);
}