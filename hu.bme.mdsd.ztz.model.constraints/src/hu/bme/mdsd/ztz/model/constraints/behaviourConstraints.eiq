package hu.bme.mdsd.ztz.model.constraints

import "http://www.mdsd.hu/drone"
import "http://www.mdsd.hu/behaviour"

@Constraint(
	key = {"taskExecution", "taskRequirement"},
	severity = "error",
	message = "The prerequisite task of $taskExecution$ is the same!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern sameTaskAsPrerequisite(taskRequirement: TaskRequirement, taskExecution: TaskExecution) {
	TaskRequirement.prerequisite(taskRequirement, taskExecution);
	TaskRequirement.taskExecution(taskRequirement, taskExecution);
}

@Constraint(
	key = {"requirement"},
	severity = "error",
	message = "The number of participants has to be positive!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern nonPositiveParticipants(requirement: TaskRequirement) {
	TaskRequirement.participants(requirement, participants);
	check(participants <= 0);
}

@Constraint(
	key = {"taskExecution"},
	severity = "error",
	message = "$taskExecution$ must not be in Waiting status when its prerequisite task is finished!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern incorrectWaitingTask(taskExecution: TaskExecution) {
	TaskRequirement.taskExecution(requirement, taskExecution);
	TaskExecution.status(taskExecution, ::Waiting);
	TaskRequirement.prerequisite.status(requirement, ::Finished);
}

@Constraint(
	key = {"taskExecution"},
	severity = "error",
	message = "$taskExecution$ must be waiting when its prerequisite is not finished!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern isNotWaitingTask(taskExecution: TaskExecution) {
	TaskRequirement.taskExecution(requirement, taskExecution);
	TaskExecution.status(taskExecution, status);
	TaskRequirement.prerequisite.status(requirement, preStatus);
	check(preStatus != hu.bme.mdsd.ztz.model.behaviour.TaskExecutionStatus.FINISHED && 
		status != hu.bme.mdsd.ztz.model.behaviour.TaskExecutionStatus.WAITING
	);
}

@Constraint(
	key = {"robot"},
	severity = "error",
	message = "The collaboration of $robot$ refers to itself!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern sameCollaboratorRobot(robot:DynamicRobot) {
	DynamicRobot.collaborations.collaborator(robot, robot);
}


@Constraint(
	key = {"detected1", "object"},
	severity = "error",
	message = "$object$ is detected more than once by the same robot!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern oneDetectedObject(object: AreaObject, detected1: DetectedObject) {
	DynamicRobot.detectedObjects(robot, detected1);
	DynamicRobot.detectedObjects(robot, detected2);
	detected1 != detected2;
	DetectedObject.object(detected1, object);
	DetectedObject.object(detected2, object);
}


@Constraint (
	key = {"drobot", "taskExecution"},
	severity = "error",
	message = "$drobot$ is not capable of executing linked task: $taskExecution$, capability of $capability$ is missing!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern robotCannotExecuteTask(drobot: DynamicRobot, taskExecution: TaskExecution, capability: Capability) {
	TaskRequirement.taskExecution(requirement, taskExecution);
	TaskExecution.executors(taskExecution, drobot);
	TaskRequirement.requiredCapabilities(requirement, capability);
	DynamicRobot.robot(drobot, robot);
	N1 == count find requiredCapability(requirement, capability);
	N2 == count find robotHasCapability(robot, capability);
	N1 != N2;
}

pattern requiredCapability(requirement:TaskRequirement, capability:Capability) {
	TaskRequirement.requiredCapabilities(requirement, capability);
}


@Constraint (
	key = {"robot", "task"},
	severity = "error",
	message = "$robot$ is executing unlinked task: $task$!",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern robotExecutingUnlinkedTask(robot: DynamicRobot, task: Task) {
	DynamicRobot.executedTasks(robot, taskExecution);
	TaskExecution.task(taskExecution, task);
	neg find robotHasTask(robot, task);
}

pattern robotHasTask(robot: DynamicRobot, task: Task) {
	DynamicRobot.robot.tasks(robot, task);
}

@Constraint(
	key = {"robot", "collaborator"},
	severity = "error",
	message = "Communication range dimensions of $robot$ and $collaborator$ are not compatible (cannot be directly converted).",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern collaborationRangeDimensionsNotCompatible(robot: Robot, collaborator: Robot) {
	DynamicRobot.collaborations(drobot, robotCollaboration);
	DynamicRobot.robot(drobot, robot);
	Robot.communicationRange.dimension(robot, dim1);
	
	RobotCollaboration.collaborator(robotCollaboration, dcollaborator);
	DynamicRobot.robot(dcollaborator, collaborator);
	Robot.communicationRange.dimension(collaborator, dim2);
	
	dim1 != dim2;
	neg find directConversionAvailable(dim1, dim2);
}

pattern collaborationBetweenDynamicRobots(drobot: DynamicRobot, dcollaborator: DynamicRobot) {
	DynamicRobot.collaborations(drobot, robotCollaboration);
	RobotCollaboration.collaborator(robotCollaboration, dcollaborator);
}

@Constraint(
	key = {"robot", "collaborator"},
	severity = "error",
	message = "Collaboration between $robot$ and $collaborator$ is not symmetric.",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern collaborationNotSymmetric(robot: Robot, collaborator: Robot) {
	DynamicRobot.robot(drobot, robot);
	DynamicRobot.robot(dcollaborator, collaborator);
	
	find collaborationBetweenDynamicRobots(drobot, dcollaborator);
	neg find collaborationBetweenDynamicRobots(dcollaborator, drobot);
}

@Constraint(
	key = {"robot"},
	severity = "error",
	message = "Dynamic behaviour of $robot$ is multiply defined.",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern dynamicRobotMultiplyDefined(robot: Robot) {
	DynamicRobot.robot(drobot1, robot);
	DynamicRobot.robot(drobot2, robot);
	
	drobot1 != drobot2;
}

@Constraint(
	key = {"execution", "requiredNum", "executorNum"},
	severity = "error",
	message = "Not enough executors for $execution$. (required: $requiredNum$, available: $executorNum$)",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern notEnoughExecutors(execution: TaskExecution, requiredNum, executorNum) {
	TaskRequirement.taskExecution(requirement, execution);
	TaskExecution.status(execution, status);
	check(status == hu.bme.mdsd.ztz.model.behaviour.TaskExecutionStatus.IN_PROGRESS);
	TaskRequirement.participants(requirement, requiredNum);
	
	executorNum == count find executorOfTask(_, execution);
	
	check(executorNum < requiredNum);
}

pattern executorOfTask(robot: DynamicRobot, execution: TaskExecution) {
	TaskExecution.executors(execution, robot);
}

@Constraint(
	key = {"requirement", "capability"},
	severity = "error",
	message = "$requirement$ has capability properties for unlinked capability ($capability$).",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern notCorrectlyLinkedCapabilityPropertiesToRequirement(requirement: TaskRequirement, capability: Capability) {
	TaskRequirement.capabilityProperties.capability(requirement, capability);
	neg find taskRequirementHasCapability(requirement, capability);
}

pattern taskRequirementHasCapability(requirement: TaskRequirement, capability: Capability) {
	TaskRequirement.requiredCapabilities(requirement, capability);
}

@Constraint(
	key = {"taskExecution"},
	severity = "error",
	message = "TaskExecution $taskExecution$ is prerequisite of itself.",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern circleRequirementReference(taskExecution: TaskExecution) {
	find taskExecutionRequiresTaskExecution+(taskExecution, taskExecution);
}

pattern taskExecutionRequiresTaskExecution(taskEx: TaskExecution, requiredTaskEx: TaskExecution) {
	TaskRequirement.taskExecution(requirement, taskEx);
	TaskRequirement.prerequisite(requirement, requiredTaskEx);
}

@Constraint(
	key = {"drobot", "communicationAction"},
	severity = "warning",
	message = "$drobot$ sends a message to itself in $communicationAction$.",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern messageToSelf(drobot: DynamicRobot, communicationAction: CommunicationAction) {
	DynamicRobot.actions(drobot, communicationAction);
	find messageTarget(communicationAction, drobot);
}

pattern messageTarget(communicationAction: CommunicationAction, target: DynamicRobot) {
	UnicastCommunication.target(communicationAction, target);
} or {
	MulticastCommunication.targets(communicationAction, target);
} or {
	BroadcastCommunication.targets(communicationAction, target);
}


@Constraint(
	key = {"communicationAction"},
	severity = "warning",
	message = "$communicationAction$ does not contain a message.",
	targetEditorId = "hu.bme.mdsd.ztz.model.behaviour.presentation.BehaviourEditorID"
)
pattern communicationActionWithoutMessage(communicationAction: CommunicationAction) {
	neg find communicationActionHasMessage(communicationAction, _);
}
	
pattern communicationActionHasMessage(communicationAction: CommunicationAction, message: Message) {
	CommunicationAction.message(communicationAction, message);
}
