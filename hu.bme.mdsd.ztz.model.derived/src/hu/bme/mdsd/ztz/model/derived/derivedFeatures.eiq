package hu.bme.mdsd.ztz.model.derived

import "http://www.mdsd.hu/drone"
import "http://www.mdsd.hu/behaviour"

@QueryBasedFeature
pattern mission(sourceRobot: Robot, targetMission: Mission) {
	Robot.tasks(sourceRobot, task);
	Task.mission(task, targetMission);
}

@QueryBasedFeature
pattern descriptor(sourceRequirement: TaskRequirement, targetDescriptor: TaskDescriptor) {
	TaskRequirement.taskExecution(sourceRequirement, taskExecution);
	TaskExecution.task.descriptor(taskExecution, targetDescriptor);
}


@QueryBasedFeature
pattern task(requirement: TaskRequirement, task: Task) {
	TaskRequirement.taskExecution.task(requirement, task);
}


@QueryBasedFeature
pattern currentTask(action: Action, task: Task) {
	Action.currentTaskExecution.task(action, task);
}


@QueryBasedFeature
pattern receivedMessages(repository: MessageRepository, message: Message) {
	DynamicRobot.actions(robotSender, action);
	UnicastCommunication.target(action, robotReceiver);
	robotSender != robotReceiver;
	UnicastCommunication.message(action, message);
	DynamicRobot.messageRepository(robotReceiver, repository);
	}
	or {
	DynamicRobot.actions(robotSender, action);
	MulticastCommunication.targets(action, robotReceiver);
	robotSender != robotReceiver;
	MulticastCommunication.message(action, message);
	DynamicRobot.messageRepository(robotReceiver, repository);
	} or {
	DynamicRobot.actions(robotSender, action);
	BroadcastCommunication.targets(action, robotReceiver);
	robotSender != robotReceiver;
	BroadcastCommunication.message(action, message);
	DynamicRobot.messageRepository(robotReceiver, repository);
}


